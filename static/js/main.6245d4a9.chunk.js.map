{"version":3,"sources":["Card.js","App.js","serviceWorker.js","index.js"],"names":["Card","memoryCardInnerClass","this","props","isFlipped","react_default","a","createElement","className","onClick","pickCard","src","alt","symbol","Component","generateDeck","symbols","deck","i","card1","push","card2","j","x","length","Math","floor","random","shuffle","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pickedCards","card1Index","card2Index","objectSpread","newDeck","map","card","index","setState","cardIndex","cardToFlip","newPickedCards","concat","setTimeout","unflipCards","bind","_this2","cardsJSX","src_Card_0","key","slice","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6245d4a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Card.css';\n\nclass Card extends Component {\n\n    render() {\n        let memoryCardInnerClass = \"MemoryCardInner\"\n        if (this.props.isFlipped) {\n            memoryCardInnerClass += \" flipped\"\n        }\n        return (\n            <div className=\"MemoryCard\" onClick={this.props.pickCard}>\n                <div className={memoryCardInnerClass}>\n                    <div className=\"MemoryCardBack\"><img src=\"https://www.digitalcrafts.com/img/DigitalCrafts-Logo-Wrench.png\" alt=\"DigitalCrafts Logo\" /></div>\n                    <div className=\"MemoryCardFront\">{this.props.symbol}</div>\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport 'normalize.css';\nimport './App.css';\nimport Card from './Card.js';\n\n\n\nfunction generateDeck() {\n  const symbols = ['∆', 'ß', '£', '§', '•', '$', '+', 'ø']\n  const deck = []\n\n  for (var i = 0; i < 8; i++) {\n    let card1 = { isFlipped: false, symbol: symbols[i] }\n    deck.push(card1)\n    let card2 = { isFlipped: false, symbol: symbols[i] }\n    deck.push(card2)\n  }\n\n  shuffle(deck)\n  return deck\n}\n\n\n\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { deck: generateDeck(), pickedCards: [] }\n  }\n\n  unflipCards(card1Index, card2Index) {\n    let card1 = { ...this.state.deck[card1Index] }\n    let card2 = { ...this.state.deck[card2Index] }\n    card1.isFlipped = false\n    card2.isFlipped = false\n\n    let newDeck = this.state.deck.map((card, index) => {\n      if (card1Index === index) {\n        return card1\n      }\n      else if (card2Index === index) {\n        return card2\n      }\n      else return card\n    })\n\n    this.setState({ deck: newDeck })\n  }\n\n  pickCard(cardIndex) {\n    if (this.state.deck[cardIndex].isFlipped) {\n      return\n    }\n\n    let cardToFlip = { ...this.state.deck[cardIndex] }\n    cardToFlip.isFlipped = true\n\n    let newPickedCards = this.state.pickedCards.concat(cardIndex)\n    let newDeck = this.state.deck.map((card, index) => {\n      if (cardIndex === index) {\n        return cardToFlip\n      }\n      return card\n    })\n    if (newPickedCards.length === 2) {\n      let card1Index = newPickedCards[0]\n      let card2Index = newPickedCards[1]\n      newPickedCards = []\n      if (newDeck[card1Index].symbol !== newDeck[card2Index].symbol) {\n        setTimeout(this.unflipCards.bind(this, card1Index, card2Index), 1000)\n      }\n    }\n    this.setState({ deck: newDeck, pickedCards: newPickedCards })\n  }\n  render() {\n    const cardsJSX = this.state.deck.map((card, index) => {\n      return <Card key={index} symbol={card.symbol} isFlipped={card.isFlipped} pickCard={this.pickCard.bind(this, index)} />\n    })\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>\n            Memory Game\n          </h1>\n          <h3>Match Cards to Win!</h3>\n        </header>\n        <div>{cardsJSX.slice(0, 4)}</div>\n        <div>{cardsJSX.slice(4, 8)}</div>\n        <div>{cardsJSX.slice(8, 12)}</div>\n        <div>{cardsJSX.slice(12, 16)}</div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}